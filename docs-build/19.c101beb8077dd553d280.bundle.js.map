{"version":3,"file":"19.c101beb8077dd553d280.bundle.js","sources":["webpack:///./packages/RadioButton/src/index.tsx"],"sourcesContent":["import withUtils from \"@blaze-react/utils\";\nimport React, { Fragment, FunctionComponent, useState } from \"react\";\ninterface IErrorMessage {\n  message: string | JSX.Element;\n  icon?: string;\n}\ninterface IRadioButtonProps {\n  options: any[];\n  required?: boolean;\n  onChange: ({\n    event,\n    selected\n  }: {\n    event: React.ChangeEvent<HTMLInputElement>;\n    selected: string | object | [];\n  }) => void;\n  utils: {\n    ErrorMessage: FunctionComponent<IErrorMessage>;\n  };\n  error?: boolean;\n  validationMessage: string | JSX.Element;\n}\nconst RadioButton: React.SFC<IRadioButtonProps> = ({\n  onChange,\n  options,\n  required,\n  error,\n  validationMessage,\n  utils: { ErrorMessage },\n  ...attrs\n}) => {\n  const [selected, setSelected] = useState<{ value: string | any }>({\n    value: null\n  });\n  const handleSelect = ({ event, item }: { event: any; item: any }) => {\n    if (item.disabled) {\n      return;\n    }\n    setSelected(item);\n    onChange({ event, selected: item });\n  };\n  return (\n    <Fragment>\n      {required && <span className=\"required\" />}\n      {options.map(item => {\n        const { value, disabled, label, id } = item;\n        return (\n          <div\n            key={label}\n            className=\"form-field form-field--radio\"\n            onClick={event => handleSelect({ event, item })}\n            role=\"button\"\n          >\n            <input\n              readOnly\n              type=\"radio\"\n              className=\"form-radio\"\n              value={value}\n              disabled={disabled}\n              checked={value === selected.value}\n              id={id}\n              {...attrs}\n            />\n            <label htmlFor={id}>{label}</label>\n          </div>\n        );\n      })}\n      {error && <ErrorMessage message={validationMessage} />}\n    </Fragment>\n  );\n};\nRadioButton.defaultProps = {\n  error: false,\n  onChange: (): void => {\n    return;\n  },\n  options: [],\n  required: false,\n  validationMessage: \"This field is required\"\n};\nexport default withUtils(RadioButton);\n"],"mappings":"AAAA","sourceRoot":""}