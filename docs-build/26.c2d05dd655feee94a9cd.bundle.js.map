{"version":3,"file":"26.c2d05dd655feee94a9cd.bundle.js","sources":["webpack:///./packages/Table/src/TableBody/TableBody.tsx"],"sourcesContent":["import { Checkboxes } from \"@blaze-react/checkboxes\";\nimport withUtils from \"@blaze-react/utils\";\nimport React from \"react\";\nimport VirtualList from \"react-tiny-virtual-list\";\ninterface ICheckbox {\n  checked: boolean;\n  id: string | number;\n  value: any;\n}\ninterface ITableBody {\n  allRows: object[];\n  checkboxes?: boolean;\n  identification: string;\n  selected: any[];\n  handleSelected: (\n    checked: ICheckbox[],\n    value: string | ICheckbox[],\n    isMultiselect?: boolean\n  ) => void;\n  columns: string[];\n  placeholder: string | JSX.Element;\n  utils: {\n    uniqueId: (element: any) => string;\n  };\n  bodyRef: any;\n  scrollToIndex: number;\n  overScanBuffer: number;\n  onRenderItems?: (arg: any) => void;\n  onClickRow: (arg: any) => void;\n}\n\nconst TableBody = ({\n  allRows,\n  checkboxes,\n  identification,\n  selected,\n  handleSelected,\n  columns,\n  placeholder,\n  utils: { uniqueId },\n  bodyRef,\n  overScanBuffer = 20,\n  onRenderItems,\n  scrollToIndex = 0,\n  onClickRow\n}: ITableBody): JSX.Element => {\n  return (\n    <div ref={bodyRef} className=\"table-body\">\n      {bodyRef.current && allRows.length && (\n        <VirtualList\n          width={\"100%\"}\n          height={bodyRef.current.offsetHeight}\n          itemCount={allRows.length}\n          itemSize={62}\n          scrollToIndex={scrollToIndex}\n          overscanCount={overScanBuffer}\n          onItemsRendered={onRenderItems}\n          renderItem={({ index, style }) => (\n            <div\n              onClick={() => onClickRow({ ...allRows[index], index })}\n              className=\"table-row\"\n              key={uniqueId(allRows[index])}\n              data-testid={`tablerow-${index + 1}`}\n              style={style}\n            >\n              {checkboxes && (\n                <div className=\"table-cell--checkbox\">\n                  <Checkboxes\n                    test-id={`row-checkbox-${index + 1}`}\n                    options={{\n                      checked: selected.includes(\n                        allRows[index][identification]\n                      ),\n                      id: allRows[index][identification],\n                      value: allRows[index][identification]\n                    }}\n                    onChange={({ value }: { value: ICheckbox[] }): void =>\n                      handleSelected(value, allRows[index][identification])\n                    }\n                  />\n                </div>\n              )}\n              {columns.map(\n                (column: string): JSX.Element => (\n                  <div className=\"table-cell\" key={column}>\n                    <div className=\"table-cell--content\">\n                      {allRows[index][column]}\n                    </div>\n                  </div>\n                )\n              )}\n            </div>\n          )}\n        />\n      )}\n\n      {!allRows.length && (\n        <div className=\"table-body-placeholder\">\n          <div>{placeholder}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default withUtils(TableBody);\n"],"mappings":"AAyGA","sourceRoot":""}