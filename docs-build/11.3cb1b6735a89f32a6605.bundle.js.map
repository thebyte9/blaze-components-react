{"version":3,"file":"11.3cb1b6735a89f32a6605.bundle.js","sources":["webpack:///./packages/Autocomplete/src/index.tsx"],"sourcesContent":["import Input from \"@blaze-react/input\";\nimport WithUtils from \"@blaze-react/utils\";\nimport React, { Fragment, useState } from \"react\";\n\ninterface IAutocompleteProps {\n  data: {\n    keyValue: string;\n    filterBy: string[];\n    data: object[];\n  };\n  utils: {\n    uniqueId: (element: any) => string;\n  };\n  selected: (...args: any[]) => any;\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  inputProps: any;\n}\nconst Autocomplete: React.SFC<IAutocompleteProps> = ({\n  data: { data, filterBy: keys, keyValue },\n  disabled,\n  label,\n  placeholder,\n  selected,\n  utils: { uniqueId },\n  inputProps\n}) => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [showSelect, setShowSelect] = useState<boolean>(false);\n\n  const handleChange = ({ value }: { value: string }): void => {\n    setShowSelect(true);\n    setInputValue(value);\n    filterByValue(value);\n  };\n\n  const filterByValue = (value: string): object[] =>\n    data.filter(\n      (copy: object) =>\n        !!keys.some(key =>\n          copy[key].toLowerCase().includes(value.toLowerCase())\n        )\n    );\n\n  const handleClick = (copiedData: object): void => {\n    setInputValue(copiedData[keyValue]);\n    setShowSelect(false);\n    selected(copiedData);\n  };\n\n  return (\n    <Fragment>\n      <Input\n        {...inputProps}\n        placeholder={placeholder}\n        label={label}\n        onChange={handleChange}\n        value={inputValue}\n        disabled={disabled}\n      />\n\n      {showSelect &&\n        filterByValue(inputValue).map(\n          (copiedData: object, key: number): JSX.Element => (\n            <div\n              className=\"panel\"\n              key={uniqueId(copiedData)}\n              onClick={() => handleClick(copiedData)}\n              role=\"button\"\n              data-testid={`option-${key + 1}`}\n            >\n              {copiedData[keyValue]}\n            </div>\n          )\n        )}\n    </Fragment>\n  );\n};\n\nAutocomplete.defaultProps = {\n  disabled: false,\n  label: \"\",\n  placeholder: \"Search\",\n  selected: (): void => {\n    return;\n  }\n};\nexport default WithUtils(Autocomplete);\n"],"mappings":"AAAA","sourceRoot":""}