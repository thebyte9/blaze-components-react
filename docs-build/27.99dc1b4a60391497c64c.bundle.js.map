{"version":3,"file":"27.99dc1b4a60391497c64c.bundle.js","sources":["webpack:///./packages/Textarea/src/index.tsx"],"sourcesContent":["import withUtils from \"@blaze-react/utils\";\nimport React, {\n  FunctionComponent,\n  TextareaHTMLAttributes,\n  useEffect,\n  useState\n} from \"react\";\ninterface IErrorMessage {\n  message: string | JSX.Element;\n  icon?: string;\n}\ninterface ITextareaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label: string;\n  required?: boolean;\n  limit?: number;\n  onChange: (...args: any[]) => void;\n  value?: string;\n  error?: boolean;\n  validationMessage: string | JSX.Element;\n  placeholder?: string;\n  utils: {\n    classNames: (className: string | object, classNames?: object) => string;\n    ErrorMessage: FunctionComponent<IErrorMessage>;\n  };\n}\nconst Textarea: FunctionComponent<ITextareaProps> = ({\n  value,\n  label,\n  limit,\n  onChange,\n  error,\n  validationMessage,\n  required,\n  id,\n  utils: { classNames, ErrorMessage },\n  ...attrs\n}) => {\n  const [content, setContent] = useState<string>(\"\");\n\n  useEffect(() => setContent(value || \"\"), [value]);\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    let {\n      target: { value: newContent }\n    } = event;\n\n    if (limit && newContent.length > limit) {\n      newContent = newContent.slice(0, limit);\n    }\n\n    setContent(newContent);\n    onChange({ event, value: newContent });\n  };\n\n  const requiredClassName: string = classNames({ required });\n\n  const total: number = !limit ? 0 : limit - content.length;\n\n  return (\n    <div className=\"form-field form-field--textarea\">\n      {label && (\n        <label htmlFor={id} className={requiredClassName}>\n          {label}\n        </label>\n      )}\n      <textarea\n        value={content}\n        rows={attrs.rows}\n        cols={attrs.cols}\n        onChange={handleChange}\n        required={required}\n        {...attrs}\n      />\n      {!!limit && <span>{total}</span>}\n      {error && <ErrorMessage message={validationMessage} />}\n    </div>\n  );\n};\nTextarea.defaultProps = {\n  error: false,\n  label: \"\",\n  limit: 0,\n  placeholder: \"\",\n  required: false,\n  validationMessage: \"This field is required\",\n  value: \"\"\n};\nexport default withUtils(Textarea);\n"],"mappings":"AAAA","sourceRoot":""}