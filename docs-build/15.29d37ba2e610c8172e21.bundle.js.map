{"version":3,"file":"15.29d37ba2e610c8172e21.bundle.js","sources":["webpack:///./packages/Checkboxes/src/index.tsx"],"sourcesContent":["import withUtils from \"@blaze-react/utils\";\nimport React, { Fragment, FunctionComponent, useEffect, useState } from \"react\";\ninterface IErrorMessage {\n  message: string | JSX.Element;\n  icon?: string;\n}\n\ninterface ICheckboxesProps {\n  options?: any[] | object;\n  returnBoolean?: boolean;\n  onChange: ({\n    event,\n    value,\n    data\n  }: {\n    event: React.MouseEvent<HTMLDivElement>;\n    value: boolean | object;\n    data: object[];\n  }) => void;\n  error?: boolean;\n  validationMessage: string | JSX.Element;\n  utils: {\n    uniqueId: (element: any) => string;\n    classNames: (className: string | object, classNames?: object) => string;\n    ErrorMessage: FunctionComponent<IErrorMessage>;\n  };\n}\nconst Checkboxes: FunctionComponent<ICheckboxesProps> = ({\n  returnBoolean,\n  onChange,\n  options,\n  error,\n  validationMessage,\n  utils: { uniqueId, classNames, ErrorMessage },\n  ...attrs\n}): JSX.Element => {\n  const formatedOptions = Array.isArray(options) ? options : [options];\n\n  const [data, setData]: any = useState(formatedOptions);\n\n  useEffect(() => setData(formatedOptions), [options]);\n\n  const toggle = ({\n    event,\n    item,\n    key\n  }: {\n    event: React.MouseEvent<HTMLDivElement>;\n    item: any;\n    key: number;\n  }): void => {\n    if (item.disabled) {\n      return;\n    }\n\n    data[key].checked = !item.checked;\n    setData([...data]);\n\n    let value = data.filter(\n      ({ checked }: { checked: boolean }): boolean => checked\n    );\n\n    if (returnBoolean) {\n      value = !!value.length;\n    }\n\n    onChange({ event, value, data });\n  };\n\n  const parsedLabel = (defaultId: any, label?: string | [string, string]) => {\n    if (Array.isArray(label)) {\n      const [labelText, labelLongerText] = label;\n      return (\n        <label htmlFor={defaultId}>\n          <span>{labelText}</span>\n          <span>{labelLongerText}</span>\n        </label>\n      );\n    }\n    return (\n      <label htmlFor={defaultId}>\n        <span>{label}</span>\n      </label>\n    );\n  };\n\n  return (\n    <Fragment>\n      {data.map(\n        (item: any, key: number): JSX.Element => {\n          const {\n            checked = false,\n            value,\n            disabled,\n            required,\n            label,\n            show = true,\n            name,\n            id\n          } = item;\n\n          const defaultId = uniqueId(item);\n\n          if (!show) {\n            return <Fragment key={id} />;\n          }\n\n          const checkboxClassName = classNames(\n            \"form-field form-field--checkbox\",\n            { required }\n          );\n\n          return (\n            <div\n              data-testid={`checkbox-${key + 1}`}\n              data-cy={`checkbox-cy-${key + 1}`}\n              key={id}\n              id={defaultId}\n              className={checkboxClassName}\n              onClick={(event): void => toggle({ event, item, key })}\n              role=\"button\"\n            >\n              <input\n                readOnly\n                type=\"checkbox\"\n                className=\"form-checkbox\"\n                value={value}\n                disabled={disabled}\n                checked={checked}\n                required={required}\n                id={id || defaultId}\n                name={name}\n                {...attrs}\n              />\n              {parsedLabel(defaultId, label)}\n            </div>\n          );\n        }\n      )}\n      {error && <ErrorMessage message={validationMessage} />}\n    </Fragment>\n  );\n};\nCheckboxes.defaultProps = {\n  error: false,\n  options: [],\n  returnBoolean: false,\n  validationMessage: \"This field is required\"\n};\nexport default withUtils(Checkboxes);\n"],"mappings":"AAAA","sourceRoot":""}