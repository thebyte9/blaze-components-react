{"version":3,"file":"1.b35e397a42c602d4e8e1.bundle.js","sources":["webpack:///./packages/Select/src/index.tsx"],"sourcesContent":["import withUtils from \"@blaze-react/utils\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\ninterface IErrorMessage {\n  message: string | JSX.Element;\n  icon?: string;\n}\n\ninterface ISelectProps {\n  label?: string;\n  keys?: string[];\n  options: any[];\n  required?: boolean;\n  onChange: ({\n    event,\n    value,\n  }: {\n    event: React.ChangeEvent<HTMLSelectElement>;\n    value: string;\n  }) => void;\n  error?: boolean;\n  validationMessage: string | JSX.Element;\n  selected?: any;\n  id?: string;\n  disabled?: any[];\n  defaultTextValue?: string;\n  utils: {\n    classNames: (className: string | object, classNames?: object) => string;\n    ErrorMessage: FunctionComponent<IErrorMessage>;\n  };\n}\nconst Select: React.SFC<ISelectProps> = ({\n  label,\n  required,\n  onChange,\n  options,\n  selected,\n  keys,\n  error,\n  validationMessage,\n  disabled,\n  defaultTextValue,\n  utils: { classNames, ErrorMessage },\n  ...attrs\n}) => {\n  const [selectedOption, setSelectedOption] = useState<string>(selected);\n\n  useEffect(() => {\n    setSelectedOption(selected);\n  }, [selected]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectedOption(value);\n    onChange({ event, value });\n  };\n\n  const requiredClassName: string = classNames({\n    required,\n  });\n\n  const setOption = (value: string, text?: string): JSX.Element => {\n    const isDisabled = disabled && disabled.includes(value);\n    return (\n      <option key={value} value={value} disabled={isDisabled}>\n        {text || value}\n      </option>\n    );\n  };\n\n  const renderOptions = () => {\n    const [first]: any = options;\n\n    if (typeof first === \"string\") {\n      return options.map((option) => setOption(option));\n    }\n    if (first instanceof Array) {\n      return options.map(([value, text]) => setOption(value, text));\n    }\n\n    return options.map((option) => {\n      const [value, text]: any = keys;\n      return setOption(option[value], option[text]);\n    });\n  };\n\n  return (\n    <div className=\"form-field form-field--select\">\n      {label && (\n        <label htmlFor={attrs.id} className={requiredClassName}>\n          {label}\n        </label>\n      )}\n      <select\n        onChange={handleChange}\n        disabled={!options.length}\n        value={selectedOption}\n        {...attrs}\n      >\n        {!required && <option defaultValue=\"\">{defaultTextValue}</option>}\n        {renderOptions()}\n      </select>\n      {error && <ErrorMessage message={validationMessage} />}\n    </div>\n  );\n};\nSelect.defaultProps = {\n  defaultTextValue: \"Please Choose...\",\n  disabled: [],\n  error: false,\n  keys: [],\n  label: \"\",\n  onChange: (): void => {\n    return;\n  },\n  options: [],\n  required: false,\n  selected: \"\",\n  validationMessage: \"This field is required\",\n};\nexport default withUtils(Select);\n"],"mappings":"AAAA","sourceRoot":""}