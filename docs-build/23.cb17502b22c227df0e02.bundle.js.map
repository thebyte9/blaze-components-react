{"version":3,"file":"23.cb17502b22c227df0e02.bundle.js","sources":["webpack:///./packages/RangeFilter/src/index.tsx"],"sourcesContent":["import withUtils from \"@blaze-react/utils\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\n\ninterface IErrorMessage {\n  message: string | JSX.Element;\n  icon?: string;\n}\ninterface IRangeValue {\n  value?: string;\n  step?: number;\n  min?: number;\n  max?: number;\n}\ninterface IRangeFilterProps {\n  label?: string;\n  modifier?: string;\n  id?: string;\n  onChange: ({\n    event,\n    value\n  }: {\n    event: React.ChangeEvent<HTMLInputElement>;\n    value: IRangeValue;\n  }) => void;\n  required?: boolean;\n  error?: boolean;\n  validationMessage: string | JSX.Element;\n  value: IRangeValue | any;\n  utils: {\n    classNames: (className: string | object, classNames?: object) => string;\n    ErrorMessage: FunctionComponent<IErrorMessage>;\n  };\n}\n\nconst RangeFilter: FunctionComponent<IRangeFilterProps> = ({\n  label,\n  modifier,\n  onChange,\n  required,\n  error,\n  validationMessage,\n  value,\n  utils: { classNames, ErrorMessage },\n  ...attrs\n}): JSX.Element => {\n  const [inputs, setInputs] = useState<any>(value);\n  const [newError, setError] = useState<boolean | undefined>(error);\n\n  useEffect(() => {\n    setError(error);\n  }, [error]);\n\n  useEffect(() => setInputs(value), [value]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const {\n      target: { value: targetValue, name }\n    } = event;\n\n    const newValues = {\n      ...inputs,\n      [name]: {\n        ...inputs[name],\n        value: parseFloat(targetValue)\n      }\n    };\n\n    setInputs(newValues);\n\n    onChange({ event, value: newValues });\n  };\n\n  const modifierClassName: string = classNames({\n    [`form-field--${modifier}`]: !!modifier\n  });\n\n  const requiredClassName: string = classNames({ required });\n\n  return (\n    <div className={`form-field form-field--range ${modifierClassName}`}>\n      {label && (\n        <label htmlFor={attrs.id} className={requiredClassName}>\n          {label}\n        </label>\n      )}\n      <div className=\"range_fields\">\n        {Object.keys(inputs).map(key => (\n          <>\n            <input\n              type=\"range\"\n              data-testid=\"input\"\n              name={key}\n              key={key}\n              onChange={handleChange}\n              {...inputs[key]}\n              {...attrs}\n            />\n            <span>{inputs[key].value}</span>\n          </>\n        ))}\n      </div>\n\n      {newError && <ErrorMessage message={validationMessage} />}\n    </div>\n  );\n};\n\nRangeFilter.defaultProps = {\n  error: false,\n  label: \"\",\n  modifier: \"\",\n  validationMessage: \"This field is required\"\n};\n\nexport default withUtils(RangeFilter);\n"],"mappings":"AAAA","sourceRoot":""}