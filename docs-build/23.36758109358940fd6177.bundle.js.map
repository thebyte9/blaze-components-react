{"version":3,"file":"23.36758109358940fd6177.bundle.js","sources":["webpack:///./packages/RangeFilter/src/logic.tsx"],"sourcesContent":["// @ts-nocheck\n// tslint:disable: no-console\n\nimport ReactDOM from \"react-dom\";\n\nconst MARGIN = 10;\nconst SEPARATION_BETWEEN_HANDLERS = 26;\n\nfunction getElements(parent: any) {\n  const touchLeft: any = parent.querySelector(\".range__filter--left\");\n  const touchRight: any = parent.querySelector(\".range__filter--right\");\n  const lineSpan: any = parent.querySelector(\".range__filter--line span\");\n  return { touchLeft, touchRight, lineSpan };\n}\n\nfunction getAttributes(parent: any, attributes: string[]) {\n  return attributes.map((attribute: string) =>\n    parseFloat(parent.getAttribute(attribute))\n  );\n}\n\nfunction getLeftStyle({ ratio, parent, handler, isRight }) {\n  const factor = isRight ? SEPARATION_BETWEEN_HANDLERS : 0;\n  return `${Math.ceil(\n    ratio *\n      (parent.offsetWidth -\n        (handler.offsetWidth + SEPARATION_BETWEEN_HANDLERS)) +\n      factor\n  )}px`;\n}\n\nfunction createFunction({ attributes, ctx, parent, type }) {\n  const [callback, minValue, maxValue] = getAttributes(parent, attributes);\n\n  if (callback) {\n    const fn = new Function(\"min, max\", callback);\n    fn(minValue, maxValue);\n  }\n\n  if (ctx[type]) {\n    ctx[type](minValue, maxValue);\n  }\n}\n\nconst RangeFilter = function(currentElement) {\n  let startX = 0;\n  let xAxis = 0;\n\n  const slider = ReactDOM.findDOMNode(currentElement);\n  console.log(slider, \"Slider\");\n  const { touchLeft, touchRight, lineSpan } = getElements(slider);\n\n  const attributes = getAttributes(slider, [\n    \"min\",\n    \"max\",\n    \"min-value\",\n    \"max-value\",\n    \"step\"\n  ]);\n\n  const [min, max, ...defaultAttributes] = attributes;\n\n  let [\n    defaultMinValue = min,\n    defaultMaxValue = max,\n    step = 0.0\n  ] = defaultAttributes;\n\n  step = Math.abs(step);\n\n  if (defaultMinValue < min) {\n    defaultMinValue = min;\n  }\n\n  if (defaultMaxValue > max) {\n    defaultMaxValue = max;\n  }\n\n  if (defaultMinValue > defaultMaxValue) {\n    defaultMinValue = defaultMaxValue;\n  }\n\n  this.reset = () => {\n    console.log(slider.offsetWidth, \"slider.offsetWidth\");\n    console.log(touchLeft.offsetWidth, \"touchLeft.offsetWidth\");\n\n    xAxis = 0;\n    startX = 0;\n    touchLeft.style.left = \"0px\";\n    lineSpan.style.marginLeft = \"0px\";\n    lineSpan.style.width = `${slider.offsetWidth - touchLeft.offsetWidth}px`;\n    touchRight.style.left = `${slider.offsetWidth - touchLeft.offsetWidth}px`;\n  };\n\n  this.setValue = ({ typeValue, attribute, isRight }) => {\n    const ratio = (typeValue - min) / (max - min);\n    const handleDirection = isRight ? touchRight : touchLeft;\n    handleDirection.style.left = getLeftStyle({\n      handler: touchLeft,\n      isRight,\n      parent: slider,\n      ratio\n    });\n    lineSpan.style.marginLeft = `${touchLeft.offsetLeft}px`;\n    lineSpan.style.width = `${touchRight.offsetLeft - touchLeft.offsetLeft}px`;\n    slider.setAttribute(attribute, typeValue);\n  };\n\n  this.setMinValue = (minValue: any) => {\n    this.setValue({\n      attribute: \"min-value\",\n      typeValue: minValue\n    });\n  };\n\n  this.setMaxValue = (maxValue: any) => {\n    this.setValue({\n      attribute: \"max-value\",\n      isRight: true,\n      typeValue: maxValue\n    });\n  };\n\n  this.reset();\n\n  const maxX = slider.offsetWidth - touchRight.offsetWidth;\n  let selectedTouch = null;\n  const initialValue = lineSpan.offsetWidth - SEPARATION_BETWEEN_HANDLERS;\n\n  this.setMinValue(defaultMinValue);\n  this.setMaxValue(defaultMaxValue);\n\n  function onStart(event: any) {\n    event.preventDefault();\n    let eventTouch = event.touches ? ([eventTouch] = event.touches) : event;\n\n    xAxis = this === touchLeft ? touchLeft.offsetLeft : touchRight.offsetLeft;\n\n    startX = eventTouch.pageX - xAxis;\n    selectedTouch = this;\n\n    slider.addEventListener(\"mousemove\", onMove);\n    slider.addEventListener(\"mouseup\", onStop);\n    slider.addEventListener(\"touchmove\", onMove);\n    slider.addEventListener(\"touchend\", onStop);\n  }\n\n  const calculateValue = () => {\n    const newValue =\n      (lineSpan.offsetWidth - SEPARATION_BETWEEN_HANDLERS) / initialValue;\n    let minValue = lineSpan.offsetLeft / initialValue;\n    let maxValue = minValue + newValue;\n\n    minValue = minValue * (max - min) + min;\n    maxValue = maxValue * (max - min) + min;\n\n    if (step) {\n      let multi = Math.floor(minValue / step);\n      minValue = step * multi;\n\n      multi = Math.floor(maxValue / step);\n      maxValue = step * multi;\n    }\n\n    slider.setAttribute(\"min-value\", minValue);\n    slider.setAttribute(\"max-value\", maxValue);\n  };\n\n  const setxAxisLeftPosition = () => {\n    if (xAxis > touchRight.offsetLeft - selectedTouch.offsetWidth + MARGIN) {\n      xAxis = touchRight.offsetLeft - selectedTouch.offsetWidth + MARGIN;\n    }\n\n    if (xAxis < 0) {\n      xAxis = 0;\n    }\n  };\n\n  const setxAxisRightPosition = () => {\n    if (xAxis < touchLeft.offsetLeft + touchLeft.offsetWidth - MARGIN) {\n      xAxis = touchLeft.offsetLeft + touchLeft.offsetWidth - MARGIN;\n    }\n    if (xAxis > maxX) {\n      xAxis = maxX;\n    }\n  };\n\n  const onMove = (event: any) => {\n    let eventTouch = event.touches ? ([eventTouch] = event.touches) : event;\n\n    xAxis = eventTouch.pageX - startX;\n\n    if (selectedTouch === touchLeft) {\n      setxAxisLeftPosition();\n    }\n\n    if (selectedTouch === touchRight) {\n      setxAxisRightPosition();\n    }\n\n    selectedTouch.style.left = `${xAxis}px`;\n    lineSpan.style.marginLeft = `${touchLeft.offsetLeft}px`;\n    lineSpan.style.width = `${touchRight.offsetLeft - touchLeft.offsetLeft}px`;\n\n    calculateValue();\n\n    createFunction({\n      attributes: [\"on-change\", \"min-value\", \"max-value\"],\n      ctx: this,\n      parent: slider,\n      type: \"onChange\"\n    });\n  };\n\n  const onStop = () => {\n    slider.removeEventListener(\"mousemove\", onMove);\n    slider.removeEventListener(\"mouseup\", onStop);\n    slider.removeEventListener(\"touchmove\", onMove);\n    slider.removeEventListener(\"touchend\", onStop);\n\n    selectedTouch = null;\n\n    calculateValue();\n\n    createFunction({\n      attributes: [\"did-changed\", \"min-value\", \"max-value\"],\n      ctx: this,\n      parent: slider,\n      type: \"didChanged\"\n    });\n  };\n\n  touchLeft.addEventListener(\"mousedown\", onStart);\n  touchRight.addEventListener(\"mousedown\", onStart);\n  touchLeft.addEventListener(\"touchstart\", onStart);\n  touchRight.addEventListener(\"touchstart\", onStart);\n};\n\nfunction initRangeFilter(currentElement: any) {\n  if (!currentElement) {\n    return {};\n  }\n  return new RangeFilter(currentElement);\n}\n\nexport default initRangeFilter;\n"],"mappings":"AAKA","sourceRoot":""}