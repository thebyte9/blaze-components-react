// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DateTimeInput component should be defined and renders correctly type=date (snapshot) 1`] = `
<withUtils(DateTimeInput)
  error={true}
  onChange={[Function]}
  type="date"
>
  <DateTimeInput
    disabled={false}
    error={true}
    label=""
    modifier=""
    onChange={[Function]}
    required={false}
    type="date"
    utils={
      Object {
        "ErrorMessage": [Function],
        "buildClassNames": [Function],
        "removeExtraSpaces": [Function],
        "uniqueId": [Function],
      }
    }
    validationMessage="This field is required"
  >
    <div
      className="form-field form-field--date-time-input"
    >
      <label
        className=""
      />
      <r
        allowSameDay={false}
        customTimeInput={null}
        data-testid="date-time-input"
        dateFormat="MMMM d, yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        enableTabLoop={true}
        excludeScrollbar={true}
        focusSelectedMonth={false}
        isClearable={true}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        open={false}
        popperModifiers={
          Object {
            "flip": Object {
              "enabled": false,
            },
          }
        }
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        required={false}
        shouldCloseOnSelect={true}
        showFourColumnMonthYearPicker={false}
        showFullMonthYearPicker={false}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        showTimeSelectOnly={false}
        showTwoColumnMonthYearPicker={false}
        showYearPicker={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
        yearItemNumber={12}
      >
        <r
          enableTabLoop={true}
          hidePopper={true}
          popperComponent={null}
          popperModifiers={
            Object {
              "flip": Object {
                "enabled": false,
              },
            }
          }
          popperOnKeyDown={[Function]}
          popperPlacement="bottom-start"
          popperProps={Object {}}
          targetComponent={
            <div
              className="react-datepicker__input-container"
            >
              <input
                className=""
                disabled={false}
                onBlur={[Function]}
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                readOnly={false}
                required={false}
                type="text"
                value=""
              />
            </div>
          }
        >
          <Manager
            className="react-datepicker-manager"
          >
            <Reference>
              <InnerReference
                setReferenceNode={[Function]}
              >
                <div
                  className="react-datepicker-wrapper"
                >
                  <div
                    className="react-datepicker__input-container"
                  >
                    <input
                      className=""
                      disabled={false}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      readOnly={false}
                      required={false}
                      type="text"
                      value=""
                    />
                  </div>
                </div>
              </InnerReference>
            </Reference>
          </Manager>
        </r>
      </r>
      <ErrorMessage
        icon="warning"
        message="This field is required"
      >
        <div
          className="validation"
          data-testid="validation-message"
        >
          <i
            className="material-icons"
          >
            warning
          </i>
          This field is required
        </div>
      </ErrorMessage>
    </div>
  </DateTimeInput>
</withUtils(DateTimeInput)>
`;

exports[`DateTimeInput component should be defined and renders correctly type=dateTime (snapshot) 1`] = `
<withUtils(DateTimeInput)
  error={true}
  onChange={[Function]}
  type="dateTime"
>
  <DateTimeInput
    disabled={false}
    error={true}
    label=""
    modifier=""
    onChange={[Function]}
    required={false}
    type="dateTime"
    utils={
      Object {
        "ErrorMessage": [Function],
        "buildClassNames": [Function],
        "removeExtraSpaces": [Function],
        "uniqueId": [Function],
      }
    }
    validationMessage="This field is required"
  >
    <div
      className="form-field form-field--date-time-input"
    >
      <label
        className=""
      />
      <r
        allowSameDay={false}
        customTimeInput={null}
        data-testid="date-time-input"
        dateFormat="MMMM d, yyyy HH:mm"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        enableTabLoop={true}
        excludeScrollbar={true}
        focusSelectedMonth={false}
        isClearable={true}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        open={false}
        popperModifiers={
          Object {
            "flip": Object {
              "enabled": false,
            },
          }
        }
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        required={false}
        shouldCloseOnSelect={true}
        showFourColumnMonthYearPicker={false}
        showFullMonthYearPicker={false}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={true}
        showTimeSelect={false}
        showTimeSelectOnly={false}
        showTwoColumnMonthYearPicker={false}
        showYearPicker={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
        yearItemNumber={12}
      >
        <r
          enableTabLoop={true}
          hidePopper={true}
          popperComponent={null}
          popperModifiers={
            Object {
              "flip": Object {
                "enabled": false,
              },
            }
          }
          popperOnKeyDown={[Function]}
          popperPlacement="bottom-start"
          popperProps={Object {}}
          targetComponent={
            <div
              className="react-datepicker__input-container"
            >
              <input
                className=""
                disabled={false}
                onBlur={[Function]}
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                readOnly={false}
                required={false}
                type="text"
                value=""
              />
            </div>
          }
        >
          <Manager
            className="react-datepicker-manager"
          >
            <Reference>
              <InnerReference
                setReferenceNode={[Function]}
              >
                <div
                  className="react-datepicker-wrapper"
                >
                  <div
                    className="react-datepicker__input-container"
                  >
                    <input
                      className=""
                      disabled={false}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      readOnly={false}
                      required={false}
                      type="text"
                      value=""
                    />
                  </div>
                </div>
              </InnerReference>
            </Reference>
          </Manager>
        </r>
      </r>
      <ErrorMessage
        icon="warning"
        message="This field is required"
      >
        <div
          className="validation"
          data-testid="validation-message"
        >
          <i
            className="material-icons"
          >
            warning
          </i>
          This field is required
        </div>
      </ErrorMessage>
    </div>
  </DateTimeInput>
</withUtils(DateTimeInput)>
`;

exports[`DateTimeInput component should be defined and renders correctly type=time (snapshot) 1`] = `
<withUtils(DateTimeInput)
  error={true}
  onChange={[Function]}
  type="time"
>
  <DateTimeInput
    disabled={false}
    error={true}
    label=""
    modifier=""
    onChange={[Function]}
    required={false}
    type="time"
    utils={
      Object {
        "ErrorMessage": [Function],
        "buildClassNames": [Function],
        "removeExtraSpaces": [Function],
        "uniqueId": [Function],
      }
    }
    validationMessage="This field is required"
  >
    <div
      className="form-field form-field--date-time-input"
    >
      <label
        className=""
      />
      <r
        allowSameDay={false}
        customTimeInput={null}
        data-testid="date-time-input"
        dateFormat="HH:mm"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        enableTabLoop={true}
        excludeScrollbar={true}
        focusSelectedMonth={false}
        isClearable={true}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        open={false}
        popperModifiers={
          Object {
            "flip": Object {
              "enabled": false,
            },
          }
        }
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        required={false}
        shouldCloseOnSelect={true}
        showFourColumnMonthYearPicker={false}
        showFullMonthYearPicker={false}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={true}
        showTimeSelect={false}
        showTimeSelectOnly={true}
        showTwoColumnMonthYearPicker={false}
        showYearPicker={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
        yearItemNumber={12}
      >
        <r
          enableTabLoop={true}
          hidePopper={true}
          popperComponent={null}
          popperModifiers={
            Object {
              "flip": Object {
                "enabled": false,
              },
            }
          }
          popperOnKeyDown={[Function]}
          popperPlacement="bottom-start"
          popperProps={Object {}}
          targetComponent={
            <div
              className="react-datepicker__input-container"
            >
              <input
                className=""
                disabled={false}
                onBlur={[Function]}
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                readOnly={false}
                required={false}
                type="text"
                value=""
              />
            </div>
          }
        >
          <Manager
            className="react-datepicker-manager"
          >
            <Reference>
              <InnerReference
                setReferenceNode={[Function]}
              >
                <div
                  className="react-datepicker-wrapper"
                >
                  <div
                    className="react-datepicker__input-container"
                  >
                    <input
                      className=""
                      disabled={false}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      readOnly={false}
                      required={false}
                      type="text"
                      value=""
                    />
                  </div>
                </div>
              </InnerReference>
            </Reference>
          </Manager>
        </r>
      </r>
      <ErrorMessage
        icon="warning"
        message="This field is required"
      >
        <div
          className="validation"
          data-testid="validation-message"
        >
          <i
            className="material-icons"
          >
            warning
          </i>
          This field is required
        </div>
      </ErrorMessage>
    </div>
  </DateTimeInput>
</withUtils(DateTimeInput)>
`;

exports[`DateTimeInput component should be defined and renders correctly type=undefined (snapshot) 1`] = `
<withUtils(DateTimeInput)
  error={true}
  onChange={[Function]}
>
  <DateTimeInput
    disabled={false}
    error={true}
    label=""
    modifier=""
    onChange={[Function]}
    required={false}
    type="dateTime"
    utils={
      Object {
        "ErrorMessage": [Function],
        "buildClassNames": [Function],
        "removeExtraSpaces": [Function],
        "uniqueId": [Function],
      }
    }
    validationMessage="This field is required"
  >
    <div
      className="form-field form-field--date-time-input"
    >
      <label
        className=""
      />
      <r
        allowSameDay={false}
        customTimeInput={null}
        data-testid="date-time-input"
        dateFormat="MMMM d, yyyy HH:mm"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        enableTabLoop={true}
        excludeScrollbar={true}
        focusSelectedMonth={false}
        isClearable={true}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        open={false}
        popperModifiers={
          Object {
            "flip": Object {
              "enabled": false,
            },
          }
        }
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        required={false}
        shouldCloseOnSelect={true}
        showFourColumnMonthYearPicker={false}
        showFullMonthYearPicker={false}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={true}
        showTimeSelect={false}
        showTimeSelectOnly={false}
        showTwoColumnMonthYearPicker={false}
        showYearPicker={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
        yearItemNumber={12}
      >
        <r
          enableTabLoop={true}
          hidePopper={true}
          popperComponent={null}
          popperModifiers={
            Object {
              "flip": Object {
                "enabled": false,
              },
            }
          }
          popperOnKeyDown={[Function]}
          popperPlacement="bottom-start"
          popperProps={Object {}}
          targetComponent={
            <div
              className="react-datepicker__input-container"
            >
              <input
                className=""
                disabled={false}
                onBlur={[Function]}
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                readOnly={false}
                required={false}
                type="text"
                value=""
              />
            </div>
          }
        >
          <Manager
            className="react-datepicker-manager"
          >
            <Reference>
              <InnerReference
                setReferenceNode={[Function]}
              >
                <div
                  className="react-datepicker-wrapper"
                >
                  <div
                    className="react-datepicker__input-container"
                  >
                    <input
                      className=""
                      disabled={false}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      readOnly={false}
                      required={false}
                      type="text"
                      value=""
                    />
                  </div>
                </div>
              </InnerReference>
            </Reference>
          </Manager>
        </r>
      </r>
      <ErrorMessage
        icon="warning"
        message="This field is required"
      >
        <div
          className="validation"
          data-testid="validation-message"
        >
          <i
            className="material-icons"
          >
            warning
          </i>
          This field is required
        </div>
      </ErrorMessage>
    </div>
  </DateTimeInput>
</withUtils(DateTimeInput)>
`;
