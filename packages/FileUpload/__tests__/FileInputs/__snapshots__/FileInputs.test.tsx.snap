// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FileInputs component should render without throwing error 1`] = `
<FileInputs
  data={
    Object {
      "altText": "",
      "caption": "",
    }
  }
  file={
    Object {
      "base64": "test-image",
      "id": "test-image-id",
      "name": "test-image-name",
      "type": "image",
    }
  }
  handleInputChange={[MockFunction]}
  handleSelectChange={[MockFunction]}
  index={0}
  name="test"
  selectOptions={
    Array [
      Array [
        "default",
        "Default",
      ],
      Array [
        "test",
        "Test",
      ],
    ]
  }
>
  <withUtils(Input)
    id="0-title-test-image-name"
    label="image title"
    name="name"
    onChange={[MockFunction]}
    value="test"
  >
    <Input
      disabled={false}
      error={false}
      hideTypeToggle={false}
      id="0-title-test-image-name"
      label="image title"
      modifier=""
      name="name"
      onChange={[MockFunction]}
      required={false}
      type="text"
      utils={
        Object {
          "ErrorMessage": [Function],
          "buildClassNames": [Function],
          "removeExtraSpaces": [Function],
          "uniqueId": [Function],
        }
      }
      validationMessage="This field is required"
      value="test"
    >
      <div
        className="form-field form-field--input  "
      >
        <label
          className=""
          htmlFor="0-title-test-image-name"
        >
          image title
        </label>
        <input
          data-testid="input"
          disabled={false}
          id="0-title-test-image-name"
          name="name"
          onChange={[Function]}
          required={false}
          type="text"
          value="test"
        />
      </div>
    </Input>
  </withUtils(Input)>
  <withUtils(Input)
    id="0-caption-test-image-name"
    label="image caption"
    name="caption-0-test-image-name"
    onChange={[MockFunction]}
    value=""
  >
    <Input
      disabled={false}
      error={false}
      hideTypeToggle={false}
      id="0-caption-test-image-name"
      label="image caption"
      modifier=""
      name="caption-0-test-image-name"
      onChange={[MockFunction]}
      required={false}
      type="text"
      utils={
        Object {
          "ErrorMessage": [Function],
          "buildClassNames": [Function],
          "removeExtraSpaces": [Function],
          "uniqueId": [Function],
        }
      }
      validationMessage="This field is required"
      value=""
    >
      <div
        className="form-field form-field--input  "
      >
        <label
          className=""
          htmlFor="0-caption-test-image-name"
        >
          image caption
        </label>
        <input
          data-testid="input"
          disabled={false}
          id="0-caption-test-image-name"
          name="caption-0-test-image-name"
          onChange={[Function]}
          required={false}
          type="text"
          value=""
        />
      </div>
    </Input>
  </withUtils(Input)>
  <withUtils(Input)
    id="0-altText-test-image-name"
    label="Alternative text"
    name="altText-0-test-image-name"
    onChange={[MockFunction]}
    value=""
  >
    <Input
      disabled={false}
      error={false}
      hideTypeToggle={false}
      id="0-altText-test-image-name"
      label="Alternative text"
      modifier=""
      name="altText-0-test-image-name"
      onChange={[MockFunction]}
      required={false}
      type="text"
      utils={
        Object {
          "ErrorMessage": [Function],
          "buildClassNames": [Function],
          "removeExtraSpaces": [Function],
          "uniqueId": [Function],
        }
      }
      validationMessage="This field is required"
      value=""
    >
      <div
        className="form-field form-field--input  "
      >
        <label
          className=""
          htmlFor="0-altText-test-image-name"
        >
          Alternative text
        </label>
        <input
          data-testid="input"
          disabled={false}
          id="0-altText-test-image-name"
          name="altText-0-test-image-name"
          onChange={[Function]}
          required={false}
          type="text"
          value=""
        />
      </div>
    </Input>
  </withUtils(Input)>
  <withUtils(Input)
    id="0-hrefUrl-test-image-name"
    label="Url"
    name="hrefUrl-0-test-image-name"
    onChange={[MockFunction]}
  >
    <Input
      disabled={false}
      error={false}
      hideTypeToggle={false}
      id="0-hrefUrl-test-image-name"
      label="Url"
      modifier=""
      name="hrefUrl-0-test-image-name"
      onChange={[MockFunction]}
      required={false}
      type="text"
      utils={
        Object {
          "ErrorMessage": [Function],
          "buildClassNames": [Function],
          "removeExtraSpaces": [Function],
          "uniqueId": [Function],
        }
      }
      validationMessage="This field is required"
    >
      <div
        className="form-field form-field--input  "
      >
        <label
          className=""
          htmlFor="0-hrefUrl-test-image-name"
        >
          Url
        </label>
        <input
          data-testid="input"
          disabled={false}
          id="0-hrefUrl-test-image-name"
          name="hrefUrl-0-test-image-name"
          onChange={[Function]}
          required={false}
          type="text"
          value=""
        />
      </div>
    </Input>
  </withUtils(Input)>
  <withUtils(Select)
    label="Store type"
    onChange={[Function]}
    options={
      Array [
        Array [
          "default",
          "Default",
        ],
        Array [
          "test",
          "Test",
        ],
      ]
    }
  >
    <Select
      defaultTextValue="Please Choose..."
      disabled={Array []}
      error={false}
      keys={Array []}
      label="Store type"
      onChange={[Function]}
      options={
        Array [
          Array [
            "default",
            "Default",
          ],
          Array [
            "test",
            "Test",
          ],
        ]
      }
      required={false}
      selected=""
      utils={
        Object {
          "ErrorMessage": [Function],
          "buildClassNames": [Function],
          "removeExtraSpaces": [Function],
          "uniqueId": [Function],
        }
      }
      validationMessage="This field is required"
    >
      <div
        className="form-field form-field--select"
      >
        <label
          className=""
        >
          Store type
        </label>
        <select
          disabled={false}
          onChange={[Function]}
          value=""
        >
          <option
            defaultValue=""
          >
            Please Choose...
          </option>
          <option
            disabled={false}
            key="default"
            value="default"
          >
            Default
          </option>
          <option
            disabled={false}
            key="test"
            value="test"
          >
            Test
          </option>
        </select>
      </div>
    </Select>
  </withUtils(Select)>
</FileInputs>
`;
